<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ü–ª–µ–π–ª–∏—Å—Ç—ã</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .navbar {
            background-color: #1DB954;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .navbar .nav-links {
            display: flex;
            align-items: center;
        }
        .navbar .nav-links a {
            color: white;
            text-decoration: none;
            margin-right: 20px;
            display: flex;
            align-items: center;
        }
        .navbar img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }
        .container {
            padding: 20px;
            width: 80%;
            margin: auto;
        }
        .playlist-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .playlist-header h1 {
            margin: 0;
        }
        .playlist-list {
            list-style: none;
            padding: 0;
        }
        .playlist-item {
            margin-bottom: 20px;
            padding: 10px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .playlist-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .playlist-created-at {
            font-size: 0.9em;
            color: #555;
        }
        .add-playlist-button {
            background-color: #1DB954;
            border: none;
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            padding-top: 60px;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }
        .modal-content input[type="text"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .modal-content button {
            background-color: #1DB954;
            border: none;
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        button {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #1DB954;
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
        }
        button:hover {
            background-color: #1e8e45;
        }

        .play-button {
            background-color: #1DB954;
            border: none;
            color: white;
            padding: 10px 15px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
        }
        .play-button.paused {
            background-color: #ff4c4c;
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background-color: #ccc;
            margin-top: 10px;
            cursor: pointer;
        }

        .progress {
            height: 100%;
            background-color: #1DB954;
            width: 0%;
        }

        .audio-container {
            display: none;
        }

        .audio-info {
            margin-top: 10px;
            color: black;
            font-size: 16px;
            text-align: center;
        }
    
        .audio-player-controls {
            flex-direction: row;
            display: flex;
            align-items: center;
        }    
    
        .volume-control {
            display: flex;
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 0;
            justify-content: center;
            width:50%;
            margin-left: 2%;
            margin-right: 2%;
        }
        .volume-control input[type="range"] {
            width: 100%;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <div class="nav-links">
            <a href="http://localhost:9997/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
        <a href="http://localhost:9997/profile">
            <img id="profileImage" src="data:{{ .PhotoType }}; base64, {{ .PhotoData }}" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è">
        </a>
    </div>
    <div class="container">
        <div class="playlist-header">
            <h1>–í–∞—à–∏ –ü–ª–µ–π–ª–∏—Å—Ç—ã:</h1>
            <button class="add-playlist-button" onclick="openModal()">–î–æ–±–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç</button>
        </div>
        <ul class="playlist-list">
            {{ range .Playlists }}
                <li class="playlist-item">
                    <div class="playlist-details">
                        <form method="GET" action="http://localhost:9997/playlists/{{ .Id }}">
                            <button type="submit" class="playlist-title">{{ .Name }}</button>
                        </form>
                        <button class="delete-playlist-button" id="deletePlaylistButton-{{ .Id }}" onclick="deletePlaylist({{ .Id }})">
                            üóë
                        </button>
                        <span class="playlist-created-at">{{ FormatTime .CreatedAt }}</span>
                    </div>
                </li>
            {{ end }}
        </ul>
    </div>

    <div class="audio-container" id="audioContainer" style="display:none; align-items:center">
        <audio id="audioPlayer" controls style="display:none">
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–≥ audio.
        </audio>
        <div class="audio-player-controls" style="margin-left:2%; width:26%; margin-right:2%; align-content: center">
            <button id="main-play-button" class="play-button" onclick="togglePlayPause()" style="margin-left: 2%; margin-right: 2%">‚ñ∂Ô∏è</button>
            <span id="volume-icon" class="volume-icon" style="margin-left: 2%; margin-right: 2%">üîä</span>
            <div class="volume-control" id="volumeControl">
                <input type="range" id="volumeSlider" min="0" max="1" step="0.01" oninput="changeVolume(this.value)">
            </div>
        </div>
        <div class="wrapper" style="display:flex; flex-direction:column; width: 70%">
            <div class="audio-info" id="audioInfo">
                <div class="song-title" id="songTitle"></div>
                <div class="song-author" id="songAuthor"></div>
            </div>
            <div class="wrapper" style="display:flex; justify-content:center; flex-direction: column; align-items: center;">
                <div class="time-container" style="display: flex; justify-content: space-between; width: 80%; font-size: 14px; color: #555;">
                    <span id="currentTime">00:00</span>
                    <span id="totalTime">00:00</span>
                </div>
                <div class="progress-bar" id="progressBar" onclick="seekAudio(event)" style="width:80%">
                    <div class="progress" id="progress"></div>
                </div>
            </div>
        </div>
    </div>

    <div id="new-playlist-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç</h2>
            <input type="text" id="playlistName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞" required>
            <button onclick="createPlaylist()">–°–æ–∑–¥–∞—Ç—å</button>
        </div>
    </div>

    <script>
        let audioPlayer = document.getElementById('audioPlayer');
        let progressBar = document.getElementById('progressBar');
        let progress = document.getElementById('progress');
        let currentTime = document.getElementById('currentTime');
        let totalTime = document.getElementById('totalTime');
        let songTitle = document.getElementById('songTitle');
        let songAuthor = document.getElementById('songAuthor');
        let audioContainer = document.getElementById('audioContainer');
        let mainPlayButton = document.getElementById('main-play-button');
        let volumeControl = document.getElementById('volumeControl');
        let volumeSlider = document.getElementById('volumeSlider');
        let modal = document.getElementById("new-playlist-modal");

        function formatTime(seconds) {
            let minutes = Math.floor(seconds / 60);
            let remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
        }

        function togglePlayPauseWithParams(songId, title, authors, duration) {
            audioPlayer.src = `http://localhost:9998/start-song/${songId}`;
            audioPlayer.load();
            audioPlayer.play();

            songTitle.textContent = title;
            songAuthor.textContent = '–ê–≤—Ç–æ—Ä: ' + authors.join(', ');
            totalTime.textContent = formatTime(duration);
            audioContainer.style.display = 'flex';
            mainPlayButton.textContent = '‚è∏Ô∏è';

            audioPlayer.addEventListener('timeupdate', updateProgress);
            audioPlayer.addEventListener('ended', resetPlayer);

            sessionStorage.setItem('currentSongId', songId);
            sessionStorage.setItem('currentSongTitle', title);
            sessionStorage.setItem('currentSongAuthors', JSON.stringify(authors));
            sessionStorage.setItem('currentSongDuration', duration);
            sessionStorage.setItem('currentVolume', audioPlayer.volume);            
            sessionStorage.setItem('isPlaying', true);
        }

        function togglePlayPause() {
            if (audioPlayer.paused) {
                audioPlayer.play();
                mainPlayButton.textContent = '‚è∏Ô∏è';
                sessionStorage.setItem('isPlaying', true);
            } else {
                audioPlayer.pause();
                mainPlayButton.textContent = '‚ñ∂Ô∏è';
                sessionStorage.setItem('isPlaying', false);
            }
        }

        function updateProgress() {
            let current = audioPlayer.currentTime;
            let duration = audioPlayer.duration;
            let progressPercent = (current / duration) * 100;
            progress.style.width = progressPercent + '%';
            currentTime.textContent = formatTime(current);

            sessionStorage.setItem('currentTime', current);
        }

        function seekAudio(event) {
            let rect = progressBar.getBoundingClientRect();
            let x = event.clientX - rect.left;
            let width = rect.width;
            let duration = audioPlayer.duration;
            let seekTime = (x / width) * duration;
            audioPlayer.currentTime = seekTime;

            sessionStorage.setItem('currentTime', seekTime);
        }

        function resetPlayer() {
            audioPlayer.currentTime = 0;
            progress.style.width = '0%';
            currentTime.textContent = '00:00';
            mainPlayButton.textContent = '‚ñ∂Ô∏è';
            sessionStorage.setItem('isPlaying', false);
        }

        function changeVolume(value) {
            audioPlayer.volume = value;
            sessionStorage.setItem('currentVolume', value);
        }

        window.addEventListener('load', function() {
            const currentSongId = sessionStorage.getItem('currentSongId');
            const currentSongTitle = sessionStorage.getItem('currentSongTitle');
            const currentSongAuthors = JSON.parse(sessionStorage.getItem('currentSongAuthors'));
            const currentSongDuration = sessionStorage.getItem('currentSongDuration');
            const currentTime = sessionStorage.getItem('currentTime');
            const currentVolume = sessionStorage.getItem('currentVolume');
            const isPlaying = sessionStorage.getItem('isPlaying');
            
            if (currentSongId && currentSongTitle && currentSongAuthors && currentSongDuration && currentTime) {
                audioPlayer.src = `http://localhost:9988/start-song/${currentSongId}`;
                audioPlayer.load();
                audioPlayer.currentTime = currentTime;
                audioPlayer.volume = currentVolume;
                volumeSlider.value = currentVolume;
                if (isPlaying == "true") {
                    audioPlayer.play();
                    mainPlayButton.textContent = '‚è∏Ô∏è';
                }

                songTitle.textContent = currentSongTitle;
                songAuthor.textContent = '–ê–≤—Ç–æ—Ä: ' + currentSongAuthors.join(', ');
                totalTime.textContent = formatTime(currentSongDuration);
                audioContainer.style.display = 'flex';

                audioPlayer.addEventListener('timeupdate', updateProgress);
                audioPlayer.addEventListener('ended', resetPlayer);
            }
        });

        function deletePlaylist(playlistId) {
            fetch(`http://localhost:9998/delete-playlist/${playlistId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
            });
        }
        function openModal() {
            modal.style.display = 'block';
        }

        function closeModal() {
            modal.style.display = 'none';
        }
        function createPlaylist() {
            let name = document.getElementById('playlistName').value;
            let reqBody = JSON.stringify({Name: name});
            fetch(`http://localhost:9998/create-playlist/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: reqBody,
                credentials: 'include'
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
            });
        }
    </script>
</body>
</html>
