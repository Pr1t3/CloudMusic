<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ü–ª–µ–π–ª–∏—Å—Ç {{ .Playlist.Name }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .navbar {
            background-color: #1DB954;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .navbar .nav-links {
            display: flex;
            align-items: center;
        }
        .navbar .nav-links a {
            color: white;
            text-decoration: none;
            margin-right: 20px;
            display: flex;
            align-items: center;
        }
        .navbar img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }
        .container {
            padding: 20px;
            width: 80%;
            margin: auto;
        }
        .song-list {
            list-style: none;
            padding: 0;
        }
        .song-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 10px;
        }
        .song-details {
            display: flex;
            justify-content: space-between;
            flex-direction: column;
        }
        .song-title {
            font-size: 18px;
            font-weight: bold;
        }
        .song-author {
            font-size: 14px;
            color: #555;
        }
        .song-duration {
            font-size: 14px;
            color: #555;
        }
        .play-button, .delete-song-button {
            background-color: #1DB954;
            border: none;
            color: white;
            padding: 10px 15px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
        }
        .progress-bar {
            width: 100%;
            height: 10px;
            background-color: #ccc;
            margin-top: 10px;
            cursor: pointer;
        }
        .progress {
            height: 100%;
            background-color: #1DB954;
            width: 0%;
        }
        .audio-container {
            display: none;
        }
        .audio-info {
            margin-top: 10px;
            color: black;
            font-size: 16px;
            text-align: center;
        }
        .audio-player-controls {
            flex-direction: row;
            display: flex;
            align-items: center;
        }
        .volume-control {
            display: flex;
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 0;
            justify-content: center;
            width: 50%;
            margin-left: 2%;
            margin-right: 2%;
        }
        .volume-control input[type="range"] {
            width: 100%;
        }
        .add-song-button, .share-button {
            background-color: #1DB954;
            border: none;
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-bottom: 20px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            padding-top: 60px;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .song-list-modal {
            list-style: none;
            padding: 0;
        }
        .song-item-modal {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 10px;
        }
        .song-details-modal {
            display: flex;
            justify-content: space-between;
            flex-direction: column;
        }
        .song-title-modal {
            font-size: 18px;
            font-weight: bold;
        }
        .song-author-modal {
            font-size: 14px;
            color: #555;
        }
        .song-duration-modal {
            font-size: 14px;
            color: #555;
        }
        .add-song-button-modal {
            background-color: #1DB954;
            border: none;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <div class="nav-links">
            <a href="http://localhost:9997/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
            <a href="http://localhost:9997/playlists">–ü–ª–µ–π–ª–∏—Å—Ç—ã</a>
        </div>
        <a href="http://localhost:9997/profile">
            <img id="profileImage" src="data:{{ .PhotoType }}; base64, {{ .PhotoData }}" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è">
        </a>
    </div>
    <div class="container">
        <h1>–ü–µ—Å–Ω–∏ –≤ {{ .Playlist.Name }}:</h1>
        <button class="add-song-button" onclick="openSongModal()">–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é</button>
        {{ if eq .Playlist.IsPublic true }}
            <button class="share-button" onclick="sharePlaylists(false)">–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∏—Ç—å—Å—è</button>
        {{ else }}
            <button class="share-button" onclick="sharePlaylists(true)">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button>
        {{ end }}
        <ul class="song-list">
            {{range .Songs}}
                <li class="song-item">
                    <div class="song-details">
                        <span class="song-title">{{.Title}}</span>
                        <span class="song-author">–ê–≤—Ç–æ—Ä:
                            {{range $index, $author := .Authors}}
                                {{if gt $index 0}}, {{end}}{{ .Name }}
                            {{end}}
                        </span>
                        <span class="song-duration">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {{formatDuration .Duration}}</span>
                    </div>
                    <button class="delete-song-button" id="deleteSongButton-{{ .Id }}" onclick="removeSongFromPlaylist({{ .Id }})">
                        üóë
                    </button>
                        <button class="play-button" id="audioButton-{{ .Id }}" onclick="togglePlayPauseWithParams({{.Id}}, '{{.Title}}', [{{range $index, $author := .Authors}}{{if gt $index 0}}, {{end}}{{ .Name }}{{end}}], {{ .Duration }})">
                        ‚ñ∂Ô∏è
                    </button>
                </li>
            {{end}}
        </ul>
    </div>

    <div class="audio-container" id="audioContainer" style="display:none; align-items:center">
        <audio id="audioPlayer" controls style="display:none">
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–≥ audio.
        </audio>
        <div class="audio-player-controls" style="margin-left:2%; width:26%; margin-right:2%; align-content: center">
            <button id="main-play-button" class="play-button" onclick="togglePlayPause()" style="margin-left: 2%; margin-right: 2%">‚ñ∂Ô∏è</button>
            <span id="volume-icon" class="volume-icon" style="margin-left: 2%; margin-right: 2%">üîä</span>
            <div class="volume-control" id="volumeControl">
                <input type="range" id="volumeSlider" min="0" max="1" step="0.01" oninput="changeVolume(this.value)">
            </div>
        </div>
        <div class="wrapper" style="display:flex; flex-direction:column; width: 70%">
            <div class="audio-info" id="audioInfo">
                <div class="song-title" id="songTitle"></div>
                <div class="song-author" id="songAuthor"></div>
            </div>
            <div class="wrapper" style="display:flex; justify-content:center; flex-direction: column; align-items: center;">
                <div class="time-container" style="display: flex; justify-content: space-between; width: 80%; font-size: 14px; color: #555;">
                    <span id="currentTime">00:00</span>
                    <span id="totalTime">00:00</span>
                </div>
                <div class="progress-bar" id="progressBar" onclick="seekAudio(event)" style="width:80%">
                    <div class="progress" id="progress"></div>
                </div>
            </div>
        </div>
    </div>

    <div id="songModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeSongModal()">&times;</span>
            <h2>–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç</h2>
            <ul class="song-list-modal" id="songListModal">
            </ul>
        </div>
    </div>

    <script>
        let audioPlayer = document.getElementById('audioPlayer');
        let progressBar = document.getElementById('progressBar');
        let progress = document.getElementById('progress');
        let currentTime = document.getElementById('currentTime');
        let totalTime = document.getElementById('totalTime');
        let songTitle = document.getElementById('songTitle');
        let songAuthor = document.getElementById('songAuthor');
        let audioContainer = document.getElementById('audioContainer');
        let mainPlayButton = document.getElementById('main-play-button');
        let volumeControl = document.getElementById('volumeControl');
        let volumeSlider = document.getElementById('volumeSlider');

        function formatTime(seconds) {
            let minutes = Math.floor(seconds / 60);
            let remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
        }

        function togglePlayPauseWithParams(songId, title, authors, duration) {
            audioPlayer.src = `http://localhost:9998/start-song/${songId}`;
            audioPlayer.load();
            audioPlayer.play();

            songTitle.textContent = title;
            songAuthor.textContent = '–ê–≤—Ç–æ—Ä: ' + authors.join(', ');
            totalTime.textContent = formatTime(duration);
            audioContainer.style.display = 'flex';
            mainPlayButton.textContent = '‚è∏Ô∏è';

            audioPlayer.addEventListener('timeupdate', updateProgress);
            audioPlayer.addEventListener('ended', resetPlayer);

            sessionStorage.setItem('currentSongId', songId);
            sessionStorage.setItem('currentSongTitle', title);
            sessionStorage.setItem('currentSongAuthors', JSON.stringify(authors));
            sessionStorage.setItem('currentSongDuration', duration);
            sessionStorage.setItem('currentVolume', audioPlayer.volume);            
            sessionStorage.setItem('isPlaying', true);
        }

        function togglePlayPause() {
            if (audioPlayer.paused) {
                audioPlayer.play();
                mainPlayButton.textContent = '‚è∏Ô∏è';
                sessionStorage.setItem('isPlaying', true);
            } else {
                audioPlayer.pause();
                mainPlayButton.textContent = '‚ñ∂Ô∏è';
                sessionStorage.setItem('isPlaying', false);
            }
        }

        function updateProgress() {
            let current = audioPlayer.currentTime;
            let duration = audioPlayer.duration;
            let progressPercent = (current / duration) * 100;
            progress.style.width = progressPercent + '%';
            currentTime.textContent = formatTime(current);

            sessionStorage.setItem('currentTime', current);
        }

        function seekAudio(event) {
            let rect = progressBar.getBoundingClientRect();
            let x = event.clientX - rect.left;
            let width = rect.width;
            let duration = audioPlayer.duration;
            let seekTime = (x / width) * duration;
            audioPlayer.currentTime = seekTime;

            sessionStorage.setItem('currentTime', seekTime);
        }

        function resetPlayer() {
            audioPlayer.currentTime = 0;
            progress.style.width = '0%';
            currentTime.textContent = '00:00';
            mainPlayButton.textContent = '‚ñ∂Ô∏è';
            sessionStorage.setItem('isPlaying', false);
        }

        function openSongModal() {
            document.getElementById('songModal').style.display = "block";
        
            fetch('http://localhost:9998/songs', {
                method: 'GET',
                credentials: 'include'
            })
            .then(response => response.json())
            .then(allSongs => {
                fetch('http://localhost:9987/playlists/{{ .Playlist.Id }}', {
                    method: 'GET',
                    credentials: 'include'
                })
                .then(response => response.json())
                .then(playlistSongs => {
                    playlistSongs = playlistSongs.Songs;
                    console.log(playlistSongs);
                    const filteredSongs = allSongs.filter(song => !playlistSongs.some(playlistSong => playlistSong.id === song.id));
        
                    const songListModal = document.getElementById('songListModal');
                    songListModal.innerHTML = '';
        
                    filteredSongs.forEach(song => {
                        fetch(`http://localhost:9998/authors/${song.id}`, {
                            method: 'GET',
                            credentials: 'include'
                        })
                        .then(response => response.json())
                        .then(authors => {
                            const songItem = document.createElement('li');
                            songItem.className = 'song-item-modal';
                            songItem.innerHTML = `
                                <div class="song-details-modal">
                                    <span class="song-title-modal">${song.title}</span>
                                    <span class="song-author-modal">–ê–≤—Ç–æ—Ä: ${authors.map(author => author.name).join(', ')}</span>
                                    <span class="song-duration-modal">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatTime(song.duration)}</span>
                                </div>
                                <button class="add-song-button-modal" onclick="addSongToPlaylist(${song.id})">–î–æ–±–∞–≤–∏—Ç—å</button>
                            `;
                            songListModal.appendChild(songItem);
                        })
                        .catch(error => console.error('Error:', error));
                    });
                })
                .catch(error => console.error('Error:', error));
            })
            .catch(error => console.error('Error:', error));
        }

        function closeSongModal() {
            document.getElementById('songModal').style.display = "none";
        }

        function addSongToPlaylist(songId) {
            const playlistId = {{ .Playlist.Id }};
            fetch(`http://localhost:9998/add-song-to-playlist/${playlistId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({ SongId: songId })
            })
            .then(response => {
                if (response.ok) {
                    closeSongModal();
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
            });
        }

        function removeSongFromPlaylist(songId) {
            const playlistId = {{ .Playlist.Id }};
            fetch(`http://localhost:9998/remove-song-from-playlist/${playlistId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({ SongId: songId })
            })
            .then(response => {
                if (response.ok) {
                    closeSongModal();
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
            });
        }

        function sharePlaylists(newStatus) {
            const playlistId = {{ .Playlist.Id }};
            let url;
            if (newStatus == true) {
                url = `http://localhost:9998/make-public/${playlistId}`
            } else {
                url = `http://localhost:9998/make-private/${playlistId}`
            }
            fetch(url, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞');
            });
        }

        function changeVolume(value) {
            audioPlayer.volume = value;
            sessionStorage.setItem('currentVolume', value);
        }

        window.addEventListener('load', function() {
            const currentSongId = sessionStorage.getItem('currentSongId');
            const currentSongTitle = sessionStorage.getItem('currentSongTitle');
            const currentSongAuthors = JSON.parse(sessionStorage.getItem('currentSongAuthors'));
            const currentSongDuration = sessionStorage.getItem('currentSongDuration');
            const currentTime = sessionStorage.getItem('currentTime');
            const currentVolume = sessionStorage.getItem('currentVolume');
            const isPlaying = sessionStorage.getItem('isPlaying');

            if (currentSongId && currentSongTitle && currentSongAuthors && currentSongDuration && currentTime) {
                audioPlayer.src = `http://localhost:9988/start-song/${currentSongId}`;
                audioPlayer.load();
                audioPlayer.currentTime = currentTime;
                audioPlayer.volume = currentVolume;
                volumeSlider.value = currentVolume;
                if (isPlaying == "true") {
                    audioPlayer.play();
                    mainPlayButton.textContent = '‚è∏Ô∏è';
                }

                songTitle.textContent = currentSongTitle;
                songAuthor.textContent = '–ê–≤—Ç–æ—Ä: ' + currentSongAuthors.join(', ');
                totalTime.textContent = formatTime(currentSongDuration);
                audioContainer.style.display = 'flex';

                audioPlayer.addEventListener('timeupdate', updateProgress);
                audioPlayer.addEventListener('ended', resetPlayer);
            }
        });
    </script>
</body>
</html>
